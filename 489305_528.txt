528 - AGATHA - on the web (*|ARCHIVE|*)

Good morning.

http://link.springer.com/chapter/10.1007%2F978-3-642-36763-2_46
"At the heart of every good graph drawing algorithm lies an efficient procedure for assigning canvas positions to a graphâ€™s nodes and the bend points of its edges."

I used to go to things, talk to people and so on. I stopped doing that. There have been some interesting and salutary side-effect. The clearest of which is that I'm losing much of a shared culture. I simply don't have much to say for myself, nor do I have opinions on things people expect me to have opinions on. Conversations with me are getting shorter by the day. At this rate I shall have absolutely run out of things to say by summer at the latest.

https://metacpan.org/pod/release/JKEGL/Marpa-R2-2.078000/html/pod/HTML.pod#VIEWS
Jeffrey Kegler: "I hope the synopsis convinces the reader that the action semantics of Marpa::R2::HTML are natural. This naturalness is achieved at the price of some novelty."

I've been hacking around in Perl again. I enjoy it, in a way. This have changed a bit since I used Perl more frequently. I moved from Perl to Ruby, then after a while Rails emerged and I pretty much stopped with Perl. 'Modern Perl' seems just to be an encouragement to people to write as though it's 2014, rather than 1994. Perl feels fast. I don't know if that means it is fast. It certainly feels faster than Racket. Speed's not everything, of course, but if I have a pile of text files to hammer through, Perl still seems to do that better than many alternatives.

http://search.cpan.org/~frew/IO-All-0.56/lib/IO/All.pod#Note_on_io
Arthur Schmidt: "The io function is a magic constructor. It is easy to use and will usually do the right thing, but can also blow up easily."

http://blogs.perl.org/users/ovid/2014/01/ditching-a-language.html
"At the BBC, as soon as they announced they were switching from Perl several Perl devs announced they were quitting and taking their hard-earned business knowledge with them. Why stick with a company when you know you don't have a future?" - some rather sharp comments in response.

http://www.modernperlbooks.com/mt/2014/01/how-to-rewrite-software-without-destroying-your-business.html
"Before you approve a fullscale rewrite of your software, ask yourself if it will destroy your business."

Onwards.

============================================================
*|LIST:ADDRESS|*

** Unsubscribe (*|UNSUB|*)